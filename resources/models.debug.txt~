
http://json.parser.online.fr/


ReadAlignment:

{"type":"record","name":"ReadAlignment","namespace":"org.ga4gh.models","doc":"Each read alignment describes an alignment with additional informationnabout the fragment and the read. A read alignment object is equivalent to anline in a SAM file.","fields":[{"name":"id","type":["null","string"],"doc":"The read alignment ID. This ID is unique within the read group thisn  alignment belongs to. This field may not be provided by all backends.n  Its intended use is to make caching and UI display easier forn  genome browsers and other light weight clients."},{"name":"readGroupId","type":"string","doc":"The ID of the read group this read belongs to.n  (Every read must belong to exactly one read group.)"},{"name":"fragmentName","type":"string","doc":"The fragment name. Equivalent to QNAME (query template name) in SAM."},{"name":"properPlacement","type":["boolean","null"],"doc":"The orientation and the distance between reads from the fragment aren  consistent with the sequencing protocol (equivalent to SAM flag 0x2)","default":false},{"name":"duplicateFragment","type":["boolean","null"],"doc":"The fragment is a PCR or optical duplicate (SAM flag 0x400)","default":false},{"name":"numberReads","type":["null","int"],"doc":"The number of reads in the fragment (extension to SAM flag 0x1)","default":null},{"name":"fragmentLength","type":["null","int"],"doc":"The observed length of the fragment, equivalent to TLEN in SAM.","default":null},{"name":"readNumber","type":["null","int"],"doc":"The read number in sequencing. 0-based and less than numberReads. This fieldn  replaces SAM flag 0x40 and 0x80.","default":null},{"name":"failedVendorQualityChecks","type":["boolean","null"],"doc":"SAM flag 0x200","default":false},{"name":"alignment","type":["null",{"type":"record","name":"LinearAlignment","doc":"A linear alignment can be represented by one CIGAR string.","fields":[{"name":"position","type":{"type":"record","name":"Position","doc":"A `Position` is a side of a base pair in some already known sequence. An`Position` is represented by a sequence name or ID, a base number on thatnsequence (0-based), and a `Strand` to indicate the left or right side.nnFor example, given the sequence GTGG, the `Position` on that sequence atnoffset 1 in the forward orientation would be the left side of the T/A base pair.nThe base at this `Position` is T. Alternately, for offset 1 in the reversenorientation, the `Position` would be the right side of the T/A base pair, andnthe base at the `Position` is A.nnOffsets added to a `Position` are interpreted as reading along its strand;nadding to a reverse strand position actually subtracts from its `position`nmember.","fields":[{"name":"referenceName","type":["null","string"],"doc":"The name of the reference sequence in whatever reference set is being used.n  Does not generally include a chr prefix, so for example X would be usedn  for the X chromosome.nn  If `sequenceId` is null, this must not be null.","default":null},{"name":"sequenceId","type":["null","string"],"doc":"The ID of the sequence on which the `Position` is located. This may be an  `Reference` sequence, or a novel piece of sequence associated with an  `VariantSet`.nn  If `referenceName` is null, this must not be null.nn  If the server supports the graph mode, this must not be null.","default":null},{"name":"position","type":"long","doc":"The 0-based offset from the start of the forward strand for that sequence.n  Genomic positions are non-negative integers less than sequence length."},{"name":"strand","type":{"type":"enum","name":"Strand","doc":"Indicates the DNA strand associate for some data item.n* `POS_STRAND`:  The postive (+) strand.n* `NEG_STRAND`: The negative (-) strand.n* `NO_STRAND`: Strand-independent data or data where the strand can not be determined.","symbols":["POS_STRAND","NEG_STRAND","NO_STRAND"]},"doc":"Strand the position is associated with. `POS_STRAND` represents the forwardn  strand, or equivalently the left side of a base, and `NEG_STRAND` representsn  the reverse strand, or equivalently the right side of a base."}]},"doc":"The position of this alignment."},{"name":"mappingQuality","type":["null","int"],"doc":"The mapping quality of this alignment. Represents how likelyn  the read maps to this position as opposed to other locations.","default":null},{"name":"cigar","type":{"type":"array","items":{"type":"record","name":"CigarUnit","doc":"A structure for an instance of a CIGAR operation.","fields":[{"name":"operation","type":{"type":"enum","name":"CigarOperation","doc":"An enum for the different types of CIGAR alignment operations that exist.nUsed wherever CIGAR alignments are used. The different enumerated valuesnhave the following usage:nn* `ALIGNMENT_MATCH`: An alignment match indicates that a sequence can ben  aligned to the reference without evidence of an INDEL. Unlike then  `SEQUENCE_MATCH` and `SEQUENCE_MISMATCH` operators, the `ALIGNMENT_MATCH`n  operator does not indicate whether the reference and read sequences are ann  exact match. This operator is equivalent to SAM's `M`.n* `INSERT`: The insert operator indicates that the read contains evidence ofn  bases being inserted into the reference. This operator is equivalent ton  SAM's `I`.n* `DELETE`: The delete operator indicates that the read contains evidence ofn  bases being deleted from the reference. This operator is equivalent ton  SAM's `D`.n* `SKIP`: The skip operator indicates that this read skips a long segment ofn  the reference, but the bases have not been deleted. This operator isn  commonly used when working with RNA-seq data, where reads may skip longn  segments of the reference between exons. This operator is equivalent ton  SAM's 'N'.n* `CLIP_SOFT`: The soft clip operator indicates that bases at the start/endn  of a read have not been considered during alignment. This may occur if then  majority of a read maps, except for low quality bases at the start/end ofn  a read. This operator is equivalent to SAM's 'S'. Bases that are soft clippedn  will still be stored in the read.n* `CLIP_HARD`: The hard clip operator indicates that bases at the start/end ofn  a read have been omitted from this alignment. This may occur if this linearn  alignment is part of a chimeric alignment, or if the read has been trimmedn  (e.g., during error correction, or to trim poly-A tails for RNA-seq). Thisn  operator is equivalent to SAM's 'H'.n* `PAD`: The pad operator indicates that there is padding in an alignment.n  This operator is equivalent to SAM's 'P'.n* `SEQUENCE_MATCH`: This operator indicates that this portion of the alignedn  sequence exactly matches the reference (e.g., all bases are equal to then  reference bases). This operator is equivalent to SAM's '='.n* `SEQUENCE_MISMATCH`: This operator indicates that this portion of then  aligned sequence is an alignment match to the reference, but a sequencen  mismatch (e.g., the bases are not equal to the reference). This cann  indicate a SNP or a read error. This operator is equivalent to SAM's 'X'.","symbols":["ALIGNMENT_MATCH","INSERT","DELETE","SKIP","CLIP_SOFT","CLIP_HARD","PAD","SEQUENCE_MATCH","SEQUENCE_MISMATCH"]},"doc":"The operation type."},{"name":"operationLength","type":"long","doc":"The number of bases that the operation runs for."},{"name":"referenceSequence","type":["null","string"],"doc":"`referenceSequence` is only used at mismatches (`SEQUENCE_MISMATCH`)n  and deletions (`DELETE`). Filling this field replaces the MD tag.n  If the relevant information is not available, leave this field as `null`.","default":null}]}},"doc":"Represents the local alignment of this sequence (alignment matches, indels, etc)n  versus the reference.","default":[]}]},{"type":"record","name":"GraphAlignment","doc":"A string-to-reference-graph alignment can be represented by one CIGAR string andnone `Path` through multiple `Reference`s, against which the CIGAR string isninterpreted.nnNote that `Path`s in `GraphAlignment`s are restricted to visiting `Reference`snand following reference adjacencies. If a read needs to be aligned to sequencesnthat are not present in a `ReferenceSet`, it needs to be aligned to a newn`ReferenceSet` with those sequences. If a read needs to follow adjacencies thatnare not present in the `ReferenceSet` it's being aligned to, it should benrepresented as a chimeric alignment, and should use multiple `ReadAlignment`snand the supplementaryAlignment flag instead of a single `GraphAlignment`.nnSome especially large deletions could be represented just as well as a largendeletion in the CIGAR string, or as a chimeric alignment.","fields":[{"name":"path","type":{"type":"record","name":"Path","doc":"A `Path` is an ordered list of `Segment`s. In general any contiguous pathnthrough a sequence graph, with no novel adjacencies, can be represented by an`Path`.","fields":[{"name":"segments","type":{"type":"array","items":{"type":"record","name":"Segment","doc":"A `Segment` is a range on a sequence, possibly including the joins at thensequence's ends. It does not include base data. (The bases for a sequence arenavailable through the `getSequenceBases()` API call.)nnIn the sequence GTGG, the segment starting at index 1 on the forward strandnwith length 2 is the TG on the forward strand. The length-2 segment startingnat index 1 on the reverse strand is AC, corresponding to the first two basenpairs of the sequence, or the last two bases of the reverse complement.","fields":[{"name":"start","type":"Position","doc":"The sequence ID and start index of this `Segment`. This base is alwaysn  included in the segment, regardless of orientation."},{"name":"length","type":"long","doc":"The length of this `Segment`'s sequence. If `start` is on the forward strand,n  the `Segment` contains the range [`start.position`, `start.position` +n  `length`). If `start` is on the reverse strand, the `Segment` contains then  range (`start.position` - `length`, `start.position`]. This is equivalent ton  starting from the side indicated by `start`, and traversing through that basen  out to the specified length."},{"name":"startJoin","type":["null","Position"],"doc":"Start and end `Position`s where this `Segment` attaches to other sequences.n  Note that the segmentId for start and end might not be the same. Then  `Segment`s covering the sequences onto which this `Segment` is joined aren  called its parents, while this segment is a child.nn  Joins may occur on the outer sides of the terminal bases in a sequence: then  left side of the base at index 0, and the right side of the base with maximumn  index. These are the terminal sides of the sequence. `startJoin` is the joinn  on the side indicated by `start`, and may only be set if that side is an  terminal side. Similarly, `endJoin` is the join on the opposite side of then  piece of sequence selected by the segment, and may only be set if that side isn  a terminal side. The value of `startJoin` or `endJoin`, if set, is the side ton  which the corresponding side of this `Sequence` is connected.","default":null},{"name":"endJoin","type":["null","Position"],"default":null}]}},"doc":"We require that one of each consecutive pair of `Segment`s in a `Path` ben  joined onto the other. `Segment`s appear in the order in which they occur whenn  walking the path from one end to the other.","default":[]}]},"doc":"The `Path` against which the read is aligned"},{"name":"mappingQuality","type":["null","int"],"doc":"The mapping quality of this alignment. Represents how likelyn  the read maps to this position as opposed to other locations.","default":null},{"name":"cigar","type":{"type":"array","items":"CigarUnit"},"doc":"Represents the local alignment of this sequence (alignment matches, indels,n  etc) versus the `Path`.","default":[]}]}],"doc":"The alignment for this alignment record. This field will ben  null if the read is unmapped.nn  If an API server supports classic mode, it must not return `GraphAlignment`n  objects here. If the API server supports the graph mode and does not supportn  the classic mode, it must not return `LinearAlignment` objects here.","default":null},{"name":"secondaryAlignment","type":["boolean","null"],"doc":"Whether this alignment is secondary. Equivalent to SAM flag 0x100.n  A secondary alignment represents an alternative to the primary alignmentn  for this read. Aligners may return secondary alignments if a read can mapn  ambiguously to multiple coordinates in the genome.nn  By convention, each read has one and only one alignment where bothn  secondaryAlignment and supplementaryAlignment are false.","default":false},{"name":"supplementaryAlignment","type":["boolean","null"],"doc":"Whether this alignment is supplementary. Equivalent to SAM flag 0x800.n  Supplementary alignments are used in the representation of a chimericn  alignment, which follows nonreference adjacencies not describable as indels.n  In a chimeric alignment, a read is split into multiple alignments thatn  may map to different reference contigs. The first alignment in the read willn  be designated as the representative alignment; the remaining alignments willn  be designated as supplementary alignments. These alignments may have differentn  mapping quality scores.nn  In each alignment in a chimeric alignment, the read will be hard clipped. Then  `alignedSequence` and `alignedQuality` fields in the alignment record willn  only represent the bases for its respective alignment.","default":false},{"name":"alignedSequence","type":["null","string"],"doc":"The bases of the read sequence contained in this alignment record.n  `alignedSequence` and `alignedQuality` may be shorter than the full read sequencen  and quality. This will occur if the alignment is part of a chimeric alignment,n  or if the read was trimmed. When this occurs, the CIGAR for this read willn  begin/end with a hard clip operator that will indicate the length of the excised sequence.","default":null},{"name":"alignedQuality","type":{"type":"array","items":"int"},"doc":"The quality of the read sequence contained in this alignment record.n  `alignedSequence` and `alignedQuality` may be shorter than the full read sequencen  and quality. This will occur if the alignment is part of a chimeric alignment,n  or if the read was trimmed. When this occurs, the CIGAR for this read willn  begin/end with a hard clip operator that will indicate the length of the excised sequence.","default":[]},{"name":"nextMatePosition","type":["null","Position"],"doc":"The mapping of the primary alignment of the `(readNumber+1)%numberReads`n  read in the fragment. It replaces mate position and mate strand in SAM.","default":null},{"name":"info","type":{"type":"map","values":{"type":"array","items":"string"}},"doc":"A map of additional read alignment information.","default":{}}]}


Position:

{"type":"record","name":"Position","namespace":"org.ga4gh.models","doc":"A `Position` is a side of a base pair in some already known sequence. An`Position` is represented by a sequence name or ID, a base number on thatnsequence (0-based), and a `Strand` to indicate the left or right side.nnFor example, given the sequence GTGG, the `Position` on that sequence atnoffset 1 in the forward orientation would be the left side of the T/A base pair.nThe base at this `Position` is T. Alternately, for offset 1 in the reversenorientation, the `Position` would be the right side of the T/A base pair, andnthe base at the `Position` is A.nnOffsets added to a `Position` are interpreted as reading along its strand;nadding to a reverse strand position actually subtracts from its `position`nmember.","fields":[{"name":"referenceName","type":["null","string"],"doc":"The name of the reference sequence in whatever reference set is being used.n  Does not generally include a chr prefix, so for example X would be usedn  for the X chromosome.nn  If `sequenceId` is null, this must not be null.","default":null},{"name":"sequenceId","type":["null","string"],"doc":"The ID of the sequence on which the `Position` is located. This may be an  `Reference` sequence, or a novel piece of sequence associated with an  `VariantSet`.nn  If `referenceName` is null, this must not be null.nn  If the server supports the graph mode, this must not be null.","default":null},{"name":"position","type":"long","doc":"The 0-based offset from the start of the forward strand for that sequence.n  Genomic positions are non-negative integers less than sequence length."},{"name":"strand","type":{"type":"enum","name":"Strand","doc":"Indicates the DNA strand associate for some data item.n* `POS_STRAND`:  The postive (+) strand.n* `NEG_STRAND`: The negative (-) strand.n* `NO_STRAND`: Strand-independent data or data where the strand can not be determined.","symbols":["POS_STRAND","NEG_STRAND","NO_STRAND"]},"doc":"Strand the position is associated with. `POS_STRAND` represents the forwardn  strand, or equivalently the left side of a base, and `NEG_STRAND` representsn  the reverse strand, or equivalently the right side of a base."}]}


LinearAlignment:

{"type":"record","name":"LinearAlignment","namespace":"org.ga4gh.models","doc":"A linear alignment can be represented by one CIGAR string.","fields":[{"name":"position","type":{"type":"record","name":"Position","doc":"A `Position` is a side of a base pair in some already known sequence. An`Position` is represented by a sequence name or ID, a base number on thatnsequence (0-based), and a `Strand` to indicate the left or right side.nnFor example, given the sequence GTGG, the `Position` on that sequence atnoffset 1 in the forward orientation would be the left side of the T/A base pair.nThe base at this `Position` is T. Alternately, for offset 1 in the reversenorientation, the `Position` would be the right side of the T/A base pair, andnthe base at the `Position` is A.nnOffsets added to a `Position` are interpreted as reading along its strand;nadding to a reverse strand position actually subtracts from its `position`nmember.","fields":[{"name":"referenceName","type":["null","string"],"doc":"The name of the reference sequence in whatever reference set is being used.n  Does not generally include a chr prefix, so for example X would be usedn  for the X chromosome.nn  If `sequenceId` is null, this must not be null.","default":null},{"name":"sequenceId","type":["null","string"],"doc":"The ID of the sequence on which the `Position` is located. This may be an  `Reference` sequence, or a novel piece of sequence associated with an  `VariantSet`.nn  If `referenceName` is null, this must not be null.nn  If the server supports the graph mode, this must not be null.","default":null},{"name":"position","type":"long","doc":"The 0-based offset from the start of the forward strand for that sequence.n  Genomic positions are non-negative integers less than sequence length."},{"name":"strand","type":{"type":"enum","name":"Strand","doc":"Indicates the DNA strand associate for some data item.n* `POS_STRAND`:  The postive (+) strand.n* `NEG_STRAND`: The negative (-) strand.n* `NO_STRAND`: Strand-independent data or data where the strand can not be determined.","symbols":["POS_STRAND","NEG_STRAND","NO_STRAND"]},"doc":"Strand the position is associated with. `POS_STRAND` represents the forwardn  strand, or equivalently the left side of a base, and `NEG_STRAND` representsn  the reverse strand, or equivalently the right side of a base."}]},"doc":"The position of this alignment."},{"name":"mappingQuality","type":["null","int"],"doc":"The mapping quality of this alignment. Represents how likelyn  the read maps to this position as opposed to other locations.","default":null},{"name":"cigar","type":{"type":"array","items":{"type":"record","name":"CigarUnit","doc":"A structure for an instance of a CIGAR operation.","fields":[{"name":"operation","type":{"type":"enum","name":"CigarOperation","doc":"An enum for the different types of CIGAR alignment operations that exist.nUsed wherever CIGAR alignments are used. The different enumerated valuesnhave the following usage:nn* `ALIGNMENT_MATCH`: An alignment match indicates that a sequence can ben  aligned to the reference without evidence of an INDEL. Unlike then  `SEQUENCE_MATCH` and `SEQUENCE_MISMATCH` operators, the `ALIGNMENT_MATCH`n  operator does not indicate whether the reference and read sequences are ann  exact match. This operator is equivalent to SAM's `M`.n* `INSERT`: The insert operator indicates that the read contains evidence ofn  bases being inserted into the reference. This operator is equivalent ton  SAM's `I`.n* `DELETE`: The delete operator indicates that the read contains evidence ofn  bases being deleted from the reference. This operator is equivalent ton  SAM's `D`.n* `SKIP`: The skip operator indicates that this read skips a long segment ofn  the reference, but the bases have not been deleted. This operator isn  commonly used when working with RNA-seq data, where reads may skip longn  segments of the reference between exons. This operator is equivalent ton  SAM's 'N'.n* `CLIP_SOFT`: The soft clip operator indicates that bases at the start/endn  of a read have not been considered during alignment. This may occur if then  majority of a read maps, except for low quality bases at the start/end ofn  a read. This operator is equivalent to SAM's 'S'. Bases that are soft clippedn  will still be stored in the read.n* `CLIP_HARD`: The hard clip operator indicates that bases at the start/end ofn  a read have been omitted from this alignment. This may occur if this linearn  alignment is part of a chimeric alignment, or if the read has been trimmedn  (e.g., during error correction, or to trim poly-A tails for RNA-seq). Thisn  operator is equivalent to SAM's 'H'.n* `PAD`: The pad operator indicates that there is padding in an alignment.n  This operator is equivalent to SAM's 'P'.n* `SEQUENCE_MATCH`: This operator indicates that this portion of the alignedn  sequence exactly matches the reference (e.g., all bases are equal to then  reference bases). This operator is equivalent to SAM's '='.n* `SEQUENCE_MISMATCH`: This operator indicates that this portion of then  aligned sequence is an alignment match to the reference, but a sequencen  mismatch (e.g., the bases are not equal to the reference). This cann  indicate a SNP or a read error. This operator is equivalent to SAM's 'X'.","symbols":["ALIGNMENT_MATCH","INSERT","DELETE","SKIP","CLIP_SOFT","CLIP_HARD","PAD","SEQUENCE_MATCH","SEQUENCE_MISMATCH"]},"doc":"The operation type."},{"name":"operationLength","type":"long","doc":"The number of bases that the operation runs for."},{"name":"referenceSequence","type":["null","string"],"doc":"`referenceSequence` is only used at mismatches (`SEQUENCE_MISMATCH`)n  and deletions (`DELETE`). Filling this field replaces the MD tag.n  If the relevant information is not available, leave this field as `null`.","default":null}]}},"doc":"Represents the local alignment of this sequence (alignment matches, indels, etc)n  versus the reference.","default":[]}]}
